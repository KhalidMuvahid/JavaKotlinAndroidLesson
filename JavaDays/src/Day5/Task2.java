package Day5;

import java.util.ArrayList;
import java.util.List;

public class Task2 {
    public static void main(String[] args) {
//        method1(10);
//        method2(10,4);
//        method3(10);
//        method4(new int[]{15,2,10,-3,1,-13});
    }


    /* 1. Метод выводит все числа кратные 3 от нуля до какого-то числа (входной параметр)*/
    static void method1(int num){
        List<Integer> list = new ArrayList<>();
        for (int i=1;i<num;i++){
            if (i%3==0){
                list.add(i);
            }
        }
        System.out.println(list);
    }


    /*2. Метод выводит все числа кратные числу, которое передаем в аргументе */
    static void method2(int n,int n2){
        for (int i=0;i<n;i+=n2){
            System.out.println(i);
        }
    }


    /*3. Вывести первые n). Мы  членов последовательности Фиббоначи (сами погуглите что это)*/
    static void method3(int n){
        List<Integer> fab = new ArrayList<>();
        for (int i=0;i<n;i++){
            if (i<=1){
                fab.add(1);
            }else{
                fab.add(fab.get(i-2) +fab.get(i-1));
            }
        }
        System.out.println(fab);
    }


    /*4. Найти минимум и максимум в массиве и вывести разницу*/
    static void method4(int[] arr){
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        if (arr.length>=2){
            for (int a:arr){
                if (a<min){
                    min=a;
                }
                if (a>max){
                    max=a;
                }
            }
        }else{
            System.out.println("this array is not enough");
            return;
        }


        System.out.println("min: "+min+" max:"+max+" dfn:"+(max-min));
    }


    /*5. Найти в массиве повторяющиеся элементы и их количество, т.е. для массива {5, 5, 5, 8, 8} будет 5: 3, 8:2*/
    static void method5(int[] array){

    }


    /*6. Вывести в обратном порядке члены массива (метод принимает аргументом массив)
     */
    static void method6(){}


    /*7. Вывести индекс элемента массива который равен строке “this”, если их несколько, то this”, если их несколько, то
через запятую*/
    static void method7(){}


    /*8. Метод принимает массив чисел на вход и отдает на выход массив тех же чисел, но
заменив отрицательные положительными. Нули не трогать.*/
    static void method8(){}


    /*9. Метод принимает массив на вход, и отдает новый массив, в котором каждый член это
сумма этого числа и следующего. Последнее число останется таким какое есть.*/
    static void method9(){}

    /*10. Метод принимает массив на вход и отдает новый массив где первым элементом
является сумма первого и последнего. Для второго элемента сумма второго и
предпоследнего.*/
    static void method10(){}


    /*11. Метод принимает на вход массив чисел и отдает на выход массив вдвое больше.
Первый и второй элемент нового массива равны первому элементу первого массива.
Третий и четвертый элементы равны второму элементу первого массива. Типа {1, 2, 3}
→ {1, 1, 2, 2, 3, 3}*/
    static void method11(){}


    /*12. Метод принимает на вход массив чисел и отдает отфильтрованный – т.е. без
дубликатов. т.е. {1, 1, 2, 3} → {1, 2, 3}*/
    static void method12(){}


    /*13. Метод принимает 2 массива чисел и выводит новый массив, где каждый член массива
это произведение членов соответственно. т.е. {1, 2, 3};{4, 5, 6} → {4, 10, 18}*/
    static void method13(){}

}
